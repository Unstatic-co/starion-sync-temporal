version: "3.5"
x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://host.docker.internal:3100/loki/api/v1/push"
      mode: non-blocking
      max-buffer-size: 4m
      loki-retries: "3"
services:
  elasticsearch:
    <<: *logging
    container_name: temporal-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    image: elasticsearch:${ELASTICSEARCH_IMG}
    ports:
      - published: 9200
        target: 9200
  temporal-history:
    <<: *logging
    container_name: temporal-history
    depends_on:
      - elasticsearch
      - temporal-admin-tools
    environment:
      - DB=postgresql
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PWD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=history
#      - BIND_ON_IP=0.0.0.0
      - PROMETHEUS_ENDPOINT=0.0.0.0:8000
#      - TEMPORAL_BROADCAST_ADDRESS=temporal-history
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - NUM_HISTORY_SHARDS=512
    image: temporalio/server:${TEMPORAL_SERVER_IMG}
    ports:
      - published: 7234
        target: 7234
      - published: 8000
        target: 8000
    restart: on-failure
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
      - ./template/my_config_template.yaml:/etc/temporal/config/config_template.yaml
  temporal-history2:
    <<: *logging
    container_name: temporal-history2
    depends_on:
      - elasticsearch
      - temporal-admin-tools
    environment:
      - DB=postgresql
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PWD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=history
      - NUM_HISTORY_SHARDS=512
      #      - BIND_ON_IP=0.0.0.0
      - PROMETHEUS_ENDPOINT=0.0.0.0:8005
      #      - TEMPORAL_BROADCAST_ADDRESS=temporal-history
      - HISTORY_MEMBERSHIP_PORT=6934
      - HISTORY_GRPC_PORT=7238
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/server:${TEMPORAL_SERVER_IMG}
    ports:
      - published: 7238
        target: 7238
      - published: 8005
        target: 8005
    restart: on-failure
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
      - ./template/my_config_template.yaml:/etc/temporal/config/config_template.yaml
  temporal-matching:
    <<: *logging
    container_name: temporal-matching
    depends_on:
      - temporal-history
    environment:
      - DB=postgresql
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PWD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=matching
      - PROMETHEUS_ENDPOINT=0.0.0.0:8001
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - NUM_HISTORY_SHARDS=512
    image: temporalio/server:${TEMPORAL_SERVER_IMG}
    ports:
      - published: 7235
        target: 7235
      - published: 8001
        target: 8001
    restart: on-failure
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
      - ./template/my_config_template.yaml:/etc/temporal/config/config_template.yaml
  temporal-matching2:
    <<: *logging
    container_name: temporal-matching2
    depends_on:
      - temporal-history
      - temporal-history2
    environment:
      - DB=postgresql
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PWD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=matching
      - PROMETHEUS_ENDPOINT=0.0.0.0:8006
      - MATCHING_GRPC_PORT=7239
      - MATCHING_MEMBERSHIP_PORT=6939
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - NUM_HISTORY_SHARDS=512
    image: temporalio/server:${TEMPORAL_SERVER_IMG}
    ports:
      - published: 6939
        target: 6939
      - published: 8006
        target: 8006
    restart: on-failure
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
      - ./template/my_config_template.yaml:/etc/temporal/config/config_template.yaml
  temporal-frontend:
    <<: *logging
    container_name: temporal-frontend
    depends_on:
      - temporal-matching
    environment:
      - DB=postgresql
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PWD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=frontend
      - FRONTEND_GRPC_PORT=7237
      - PROMETHEUS_ENDPOINT=0.0.0.0:8002
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - NUM_HISTORY_SHARDS=512
    image: temporalio/server:${TEMPORAL_SERVER_IMG}
    ports:
      - published: 7237
        target: 7237
      - published: 8002
        target: 8002
    restart: on-failure
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
      - ./template/my_config_template.yaml:/etc/temporal/config/config_template.yaml
  temporal-frontend2:
    <<: *logging
    container_name: temporal-frontend2
    depends_on:
      - temporal-matching
    environment:
      - DB=postgresql
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PWD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=frontend
      # set different frontend grpc port
      - FRONTEND_GRPC_PORT=7236
      # set different membership port than temporal-frontend
      - FRONTEND_MEMBERSHIP_PORT=6936
      - PROMETHEUS_ENDPOINT=0.0.0.0:8004
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - NUM_HISTORY_SHARDS=512
    image: temporalio/server:${TEMPORAL_SERVER_IMG}
    ports:
      - published: 7236
        target: 7236
      - published: 8004
        target: 8004
    restart: on-failure
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
      - ./template/my_config_template.yaml:/etc/temporal/config/config_template.yaml
  temporal-worker:
    <<: *logging
    container_name: temporal-worker
    depends_on:
      - temporal-frontend
      - temporal-frontend2
    environment:
      - DB=postgresql
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PWD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=worker
      - PROMETHEUS_ENDPOINT=0.0.0.0:8003
      # set to nginx
      - PUBLIC_FRONTEND_ADDRESS=temporal-nginx:7233
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/server:${TEMPORAL_SERVER_IMG}
    ports:
      - published: 7232
        target: 7232
      - published: 8003
        target: 8003
    restart: on-failure
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
      - ./template/my_config_template.yaml:/etc/temporal/config/config_template.yaml

  temporal-admin-tools:
    <<: *logging
    container_name: temporal-admin-tools
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal-nginx:7233
      - PUBLIC_FRONTEND_ADDRESS=temporal-nginx:7233
      - DB=postgresql
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PWD}
      - POSTGRES_SEEDS=postgresql
      - TEMPORAL_HOME=/etc/temporal
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/admin-tools:${TEMPORAL_SERVER_IMG}
    volumes:
      - "./script/setup.sh:/etc/temporal/setup.sh"
    entrypoint:
      - /etc/temporal/setup.sh
    restart: always
    stdin_open: true
    tty: true
    depends_on:
      - elasticsearch

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal-admin-tools
    environment:
      - TEMPORAL_ADDRESS=temporal-nginx:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
      - TEMPORAL_UI_PORT=8081
    image: temporalio/ui:${TEMPORAL_UI_IMG}
    ports:
      - published: 8081
        target: 8081

  temporal-web:
    container_name: temporal-web
    depends_on:
      - temporal-admin-tools
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal-nginx:7233
      - TEMPORAL_PERMIT_WRITE_API=true
      - TEMPORAL_GRPC_MAX_MESSAGE_LENGTH=67108864
    image: temporalio/web:${TEMPORAL_WEB_IMG}
    ports:
      - published: 8088
        target: 8088

  prometheus:
    container_name: prometheus
    image: prom/prometheus:${PROMETHEUS_IMG}
    ports:
      - published: 9090
        target: 9090
    volumes:
      - type: bind
        source: ./deployment/prometheus/config.yml
        target: /etc/prometheus/prometheus.yml
    depends_on:
      - temporal-worker

  grafana:
    container_name: grafana
    image: grafana/grafana:${GRAFANA_IMG}
    build: './deployment/grafana'
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - published: 8085
        target: 3000
    volumes:
      - type: bind
        source: ./deployment/grafana/provisioning/datasources
        target: /etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:${PORTAINER_IMG}
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer-data:/data
    ports:
      - published: 9000
        target: 9000

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:${JAEGER_IMG}
    ports:
      - published: 16686
        target: 16686
      - published: 14268
        target: 14268
      - published: 14250
        target: 14250

  otel-collector:
    image: otel/opentelemetry-collector:${OTEL_IMG}
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - type: bind
        source: ./deployment/otel/otel-config.yaml
        target: /etc/otel-collector-config.yaml
    ports:
      - published: 1888
        target: 1888
      - published: 13133
        target: 13133
      - published: 4317
        target: 4317
      - published: 55670
        target: 55670
    depends_on:
      - jaeger-all-in-one

  loki:
    container_name: loki
    image: grafana/loki:${LOKI_IMG}
    ports:
      - published: 3100
        target: 3100
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - type: bind
        source: ./deployment/loki/local-config.yaml
        target: /etc/loki/local-config.yaml
    depends_on:
      - grafana

  temporal-nginx:
    <<: *logging
    image: nginx:${NGINX_IMG}
    container_name: temporal-nginx
    restart: unless-stopped
    depends_on:
      - temporal-frontend
      - temporal-frontend2
    ports:
      - 7233:7233
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf

networks:
  default:
    external: true
    name: temporal-network
