version: "3.5"
services:
  elasticsearch:
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - xpack.security.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
    image: elasticsearch:7.16.2
    ports:
      - 9200:9200
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
#      - elasticsearch
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
#      - ENABLE_ES=true
#      - ES_SEEDS=elasticsearch
#      - ES_VERSION=v7
      - PROMETHEUS_ENDPOINT=0.0.0.0:8000
    image: temporalio/auto-setup:1.17.2
    ports:
      - 7233:7233
      - 8000:8000
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: temporal
    stdin_open: true
    tty: true
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:1.17.2
    stdin_open: true
    tty: true
    healthcheck:
      test:
        [
            "CMD",
            "tctl",
            "--address",
            "temporal:7233",
            "workflow",
            "list"
        ]
      interval: 1s
      timeout: 5s
      retries: 30
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
      - TEMPORAL_UI_PORT=8080
    image: temporalio/ui:2.5.0
    ports:
      - 8080:8080
  temporal-web:
    container_name: temporal-web
    depends_on:
      - temporal
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
      - TEMPORAL_GRPC_MAX_MESSAGE_LENGTH=67108864
    image: temporalio/web:1.15.0
    ports:
      - 8088:8088
#  dockerdemo:
#    container_name: dockerdemo
#    depends_on:
#      - temporal
#    image: demos/dockerspringboot:latest
#    ports:
#      - 8095:8095
  prometheus:
    image: prom/prometheus:v2.37.0
    ports:
      - 9090:9090
    volumes:
      - type: bind
        source: ./deployment/prometheus/config.yml
        target: /etc/prometheus/prometheus.yml
    depends_on:
      - temporal
  grafana:
    build: './deployment/grafana'
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - 8085:3000
    volumes:
      - type: bind
        source: ./deployment/grafana/provisioning/datasources
        target: /etc/grafana/provisioning/datasources
    depends_on:
      - temporal
      - prometheus
  fluentd:
    container_name: fluentd
    build: ./fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    links:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.1
    container_name: kibana
    ports:
      - "5601:5601"
    links:
      - elasticsearch
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer-data:/data
    ports:
      - 9000:9000
networks:
  default:
    external:
      name: temporal-network

